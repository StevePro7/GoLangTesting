Go Pipelines
07-Nov-2023

https://go.dev/blog/pipelines

Pipeline
series of stages connected by channels
each state is a group of goroutines running the same function

* recd values upstream via inbound channels
* perform function on data produce new values
* send values downstream via outbound channels


first stage
source	producer

last stage
sink	consumer


Fan-out, fan-in

Fan-out
multiple functions read from same channel until channel closed
distribute work amongst group of workers to parallelize CPU + I/O

Fan-in
function read from multiple inputs and processed until all channels closed
multiplex input channels onto a single channel that's closed when all inputs closed


Stopping short
* stages close their outbound channels when all send operations are done
* stages keep receiving values from inbound channels until channels closed


NOTE
if a stage fails to consume all inbound values then the goroutines attempting to send
those values will block indefinitely


Resource leak
goroutines consume memory and runtime resources
heap references in goroutine stacks keep data from being garbage collected


SOLN #1
change outbound channels to have a buffer
e.g.
gen()
copy list of integers into buffered channel and avoid creating new goroutine


Example of bad code
if downstream stage reads any fewer values then we will again have blocked goroutines


SOLN #2
Explicit cancellation
tell goroutnes in the upstream stages to abandon vales they're trying to send
does by sending values on a channel called done


done := make(chan struct{}, 1)
done <- struct{}{}

done uses empty struct [0x bytes] as value doesn't matter
it is the receive event that indicates the send on out should be abandoned

output goroutines continue looping on their inbound channel
so the upstream stages are not blocked

PROBLEM
each downstream receiver needs to know the number of potentially blocked upstream senders
and arrange to signal those senders on early return

Need
unknown + unbuffered number of goroutines to stop sending their values downstream

In Go can do this by closing a channel because
a receive operation of a closed channel can always proceed immediately,
yielding the element type's zero value

This means main can unblock senders by closing the done channel
close() is a broadcast signal to the senders

Extend each pipeline function to accept done as parameter and arrange for the 
close to happen via a defer statement so all return paths from main signal pipeline
stages to exit
